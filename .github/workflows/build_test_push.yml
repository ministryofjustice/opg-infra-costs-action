name: Build, Test, Push

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
  workflow_dispatch:

defaults:
  run:
    shell: bash

jobs:
  test:
    name: Test Costs to Metrics
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      # - uses: actions/setup-node@v2

      # - name: Get yarn cache directory path
      #   id: yarn-cache-dir-path
      #   run: echo "::set-output name=dir::$(yarn cache dir)"
      # - name: Dependencies from Cache
      #   uses: actions/cache@v2
      #   id: yarn-cache
      #   with:
      #     path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
      #     key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
      #     restore-keys: |
      #       ${{ runner.os }}-yarn-
      # - name: Run Unit Tests & Generate Coverage Report
      #   run: |
      #     mkdir -p /home/runner/project/build/service-pdf
      #     make unit-test-coverage
      # - name: Publish Unit Test Results
      #   uses: EnricoMi/publish-unit-test-result-action@v1
      #   if: always()
      #   with:
      #     check_name: "Unit Test Results"
      #     files: test-results/junit/results.xml

      # - name: Coverage Report
      #   uses: lucassabreu/comment-coverage-clover@main
      #   with:
      #     file: "coverage/clover.xml"
      #     min-line-coverage: 89
      #     min-method-coverage: 100

      # - name: Upload Junit
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: junit
      #     path: |
      #       test-results/junit
      # - name: Upload Coverage
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: coverage
      #     path: |
      #       /home/runner/project/build/service-pdf
  build:
    name: "Build & Push Containers"
    runs-on: ubuntu-latest
    needs: test
    outputs:
      tag: ${{ steps.bump_version.outputs.tag }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: '0'
      - name: Extract branch name
        run: |
          if [ "${{ github.head_ref }}" == "" ]; then
            echo BRANCH_NAME=main >> $GITHUB_ENV
          else
            echo BRANCH_NAME=${{ github.head_ref }} >> $GITHUB_ENV
          fi
        id: extract_branch
      - uses: unfor19/install-aws-cli-action@v1

      - name: Build Container
        run: |
          make build
      - name: Trivy Image Vulnerability Scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: pdf-service:latest
          severity: 'HIGH,CRITICAL'
          format: 'template'
          template: '@/contrib/sarif.tpl'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v1
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Bump version
        id: bump_version
        uses: anothrNick/github-tag-action@1.33.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          INITIAL_VERSION: 1.0.0
          DEFAULT_BUMP: patch
          PRERELEASE_SUFFIX: ${{ env.BRANCH_NAME }}
          RELEASE_BRANCHES: main
          WITH_V: true

      # - name: Configure AWS Credentials
      #   uses: aws-actions/configure-aws-credentials@v1
      #   with:
      #     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_ACTIONS }}
      #     aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_ACTIONS }}
      #     aws-region: eu-west-1
      #     role-to-assume: arn:aws:iam::311462405659:role/costs-to-metrics-ci
      #     role-duration-seconds: 3600
      #     role-session-name: GitHubActions

      # - name: ECR Login
      #   id: login-ecr
      #   uses: aws-actions/amazon-ecr-login@v1
      #   with:
      #     registries: 311462405659

      # - name: Push Container
      #   env:
      #     ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      #     COSTS_ECR_REPOSITORY: costs_to_metrics
      #   run: |
      #     docker tag costs_to_metrics:latest $ECR_REGISTRY/$COSTS_ECR_REPOSITORY:${{ steps.bump_version.outputs.tag }}
      #     docker tag costs_to_metrics:latest $ECR_REGISTRY/$COSTS_ECR_REPOSITORY:latest
      #     if [ $BRANCH_NAME == "main" ]; then
      #       docker tag costs_to_metrics:latest $ECR_REGISTRY/$COSTS_ECR_REPOSITORY:main-${{ steps.bump_version.outputs.tag }}
      #       # We want all of the tags pushed
      #       docker push --all-tags $ECR_REGISTRY/$COSTS_ECR_REPOSITORY
      #     else
      #       docker push $ECR_REGISTRY/$COSTS_ECR_REPOSITORY:${{ steps.bump_version.outputs.tag }}
      #     fi
